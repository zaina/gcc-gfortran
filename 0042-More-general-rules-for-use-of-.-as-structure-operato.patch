From b905b1a863787cdad93e64e6aa3b20ebaeda911f Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Wed, 18 Nov 2015 18:05:36 +0000
Subject: [PATCH 42/47] More general rules for use of '.' as structure operator

---
 gcc/fortran/primary.c | 31 +++++++++++++++++++++++++------
 1 file changed, 25 insertions(+), 6 deletions(-)

diff --git a/gcc/fortran/primary.c b/gcc/fortran/primary.c
index 6e4c271..3717d40 100644
--- a/gcc/fortran/primary.c
+++ b/gcc/fortran/primary.c
@@ -1811,6 +1811,25 @@ extend_ref (gfc_expr *primary, gfc_ref *tail)
   return tail;
 }
 
+match
+gfc_match_structure_access_operator ()
+{
+  match m;
+  if (gfc_option.flag_oracle_support)
+    {
+      m = gfc_match_char('.');
+      if (m == MATCH_YES)
+	return m;
+    }
+  return gfc_match_char ('%');
+}
+
+int
+gfc_peek_structure_access_operator ()
+{
+  return gfc_peek_ascii_char () == '%' || (gfc_option.flag_oracle_support && gfc_peek_ascii_char () == '.');
+}
+
 /* Match any additional specifications associated with the current
    variable like member references or substrings.  If equiv_flag is
    set we only match stuff that is allowed inside an EQUIVALENCE
@@ -1910,11 +1929,11 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
   if (equiv_flag)
     return MATCH_YES;
 
-  if (sym->ts.type == BT_UNKNOWN && gfc_peek_ascii_char () == '%'
+  if (sym->ts.type == BT_UNKNOWN && gfc_peek_structure_access_operator ()
       && gfc_get_default_type (sym->name, sym->ns)->type == BT_DERIVED)
     gfc_set_default_type (sym, 0, sym->ns);
 
-  if (sym->ts.type == BT_UNKNOWN && gfc_match_char ('%') == MATCH_YES)
+  if (sym->ts.type == BT_UNKNOWN && gfc_match_char('%') == MATCH_YES)
     {
       gfc_error ("Symbol '%s' at %C has no IMPLICIT type", sym->name);
       return MATCH_ERROR;
@@ -1930,7 +1949,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
   old_locus = gfc_current_locus;
 
   if ((sym->ts.type != BT_DERIVED && sym->ts.type != BT_CLASS)
-      || !(gfc_match_char ('%') == MATCH_YES || ( gfc_option.flag_oracle_support && gfc_match_char ('.') == MATCH_YES) ))
+      || gfc_match_structure_access_operator () != MATCH_YES)
     goto check_substring;
 
   sym = sym->ts.u.derived;
@@ -2074,7 +2093,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
 	}
 
       if ((component->ts.type != BT_DERIVED && component->ts.type != BT_CLASS)
-	  || gfc_match_char ('%') != MATCH_YES)
+	  || gfc_match_structure_access_operator () != MATCH_YES)
 	break;
 
       sym = component->ts.u.derived;
@@ -2985,7 +3004,7 @@ gfc_match_rvalue (gfc_expr **result)
 	 via an IMPLICIT statement.  This can't wait for the
 	 resolution phase.  */
 
-      if (gfc_peek_ascii_char () == '%'
+      if (gfc_peek_structure_access_operator ()
 	  && sym->ts.type == BT_UNKNOWN
 	  && gfc_get_default_type (sym->name, sym->ns)->type == BT_DERIVED)
 	gfc_set_default_type (sym, 0, sym->ns);
@@ -3308,7 +3327,7 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)
 	implicit_ns = gfc_current_ns;
       else
 	implicit_ns = sym->ns;
-      if (gfc_peek_ascii_char () == '%'
+      if (gfc_peek_structure_access_operator ()
 	  && sym->ts.type == BT_UNKNOWN
 	  && gfc_get_default_type (sym->name, implicit_ns)->type == BT_DERIVED)
 	gfc_set_default_type (sym, 0, implicit_ns);
-- 
1.9.1

