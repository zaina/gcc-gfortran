From ce22af782b0f3a98b0b201fb1d317fda202ce3aa Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Tue, 15 Sep 2015 16:35:42 +0100
Subject: [PATCH 10/47] Allow dot ('.') operator as structure member operator.

This is necessary to parse older STRUCTURE/RECORD syntax but introduces
parsing problems with operator names. Allowing this means the names of
intrinsic operators ('.eq.' etc) can not be used in structures. User
defined types in f90 and later may show a different error message to before.

Added the '-foracle-support' flag since this behaviour may break some corner
cases in existing code (for example, derived types in which 'eq' is actually
the name of a field)
---
 gcc/fortran/lang.opt   |  4 ++++
 gcc/fortran/matchexp.c | 12 +++++++-----
 gcc/fortran/options.c  |  9 +++++++--
 gcc/fortran/primary.c  | 25 +++++++++++++++++++++++--
 4 files changed, 41 insertions(+), 9 deletions(-)

diff --git a/gcc/fortran/lang.opt b/gcc/fortran/lang.opt
index fbe8a1b..dcdefa1 100644
--- a/gcc/fortran/lang.opt
+++ b/gcc/fortran/lang.opt
@@ -601,6 +601,10 @@ fworking-directory
 Fortran
 ; Documented in C
 
+foracle-support
+Fortran Undocumented
+Support some extensions permitted by the Oracle Fortran compiler
+
 idirafter
 Fortran Joined Separate
 ; Documented in C
diff --git a/gcc/fortran/matchexp.c b/gcc/fortran/matchexp.c
index 4643281..ab09f48 100644
--- a/gcc/fortran/matchexp.c
+++ b/gcc/fortran/matchexp.c
@@ -32,14 +32,16 @@ static char expression_syntax[] = N_("Syntax error in expression at %C");
    few restrictions.  The error_flag controls whether an error is
    raised if 'true' or 'false' are used or not.  */
 
+extern const char* const badops[];
+
+const char * const badops[] = {
+  "and", "or", "not", "eqv", "neqv", "eq", "ne", "ge", "le", "lt", "gt",
+  NULL
+};
+
 match
 gfc_match_defined_op_name (char *result, int error_flag)
 {
-  static const char * const badops[] = {
-    "and", "or", "not", "eqv", "neqv", "eq", "ne", "ge", "le", "lt", "gt",
-      NULL
-  };
-
   char name[GFC_MAX_SYMBOL_LEN + 1];
   locus old_loc;
   match m;
diff --git a/gcc/fortran/options.c b/gcc/fortran/options.c
index fba1a3f..3dc343f 100644
--- a/gcc/fortran/options.c
+++ b/gcc/fortran/options.c
@@ -160,7 +160,8 @@ gfc_init_options (unsigned int decoded_options_count,
   gfc_option.flag_realloc_lhs = -1;
   gfc_option.flag_aggressive_function_elimination = 0;
   gfc_option.flag_frontend_optimize = -1;
-  
+  gfc_option.flag_oracle_support = 0;
+
   gfc_option.fpe = 0;
   gfc_option.rtcheck = 0;
   gfc_option.coarray = GFC_FCOARRAY_NONE;
@@ -737,7 +738,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,
     case OPT_fallow_leading_underscore:
       gfc_option.flag_allow_leading_underscore = value;
       break;
-      
+
     case OPT_fbackslash:
       gfc_option.flag_backslash = value;
       break;
@@ -1119,6 +1120,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,
     case OPT_fcoarray_:
       gfc_handle_coarray_option (arg);
       break;
+
+    case OPT_foracle_support:
+      gfc_option.flag_oracle_support = value;
+      break;
     }
 
   Fortran_handle_option_auto (&global_options, &global_options_set, 
diff --git a/gcc/fortran/primary.c b/gcc/fortran/primary.c
index a94ae21..7cb8a4d 100644
--- a/gcc/fortran/primary.c
+++ b/gcc/fortran/primary.c
@@ -30,6 +30,9 @@ along with GCC; see the file COPYING3.  If not see
 
 int matching_actual_arglist = 0;
 
+/* A list of intrinsic operation names from matchexp.c */
+extern const char* const badops[];
+
 /* Matches a kind-parameter expression, which is either a named
    symbolic constant or a nonnegative integer constant.  If
    successful, sets the kind value to the correct integer.
@@ -1808,7 +1811,6 @@ extend_ref (gfc_expr *primary, gfc_ref *tail)
   return tail;
 }
 
-
 /* Match any additional specifications associated with the current
    variable like member references or substrings.  If equiv_flag is
    set we only match stuff that is allowed inside an EQUIVALENCE
@@ -1827,6 +1829,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
   gfc_symbol *sym = primary->symtree->n.sym;
   match m;
   bool unknown;
+  locus old_locus;
 
   tail = NULL;
 
@@ -1924,8 +1927,10 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
       return MATCH_ERROR;
     }
 
+  old_locus = gfc_current_locus;
+
   if ((sym->ts.type != BT_DERIVED && sym->ts.type != BT_CLASS)
-      || gfc_match_char ('%') != MATCH_YES)
+      || !(gfc_match_char ('%') == MATCH_YES || ( gfc_option.flag_oracle_support && gfc_match_char ('.') == MATCH_YES) ))
     goto check_substring;
 
   sym = sym->ts.u.derived;
@@ -1934,6 +1939,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
     {
       gfc_try t;
       gfc_symtree *tbp;
+      int is_operation_name = 0;
 
       m = gfc_match_name (name);
       if (m == MATCH_NO)
@@ -1994,6 +2000,21 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
 	  break;
 	}
 
+      /* If this is a reserved name, we should reject this and continue parsing */
+      for (int i=0; badops[i] != NULL; i++)
+        {
+          if (strcmp (name, badops[i])==0)
+            {
+              is_operation_name = 1; break;
+            }
+        }
+
+      if (is_operation_name || gfc_find_uop (name, NULL))
+        {
+          gfc_current_locus = old_locus;
+          break; /* Equivalent to jumping to check_substring */
+        }
+
       component = gfc_find_component (sym, name, false, false);
       if (component == NULL)
 	return MATCH_ERROR;
-- 
1.9.1

