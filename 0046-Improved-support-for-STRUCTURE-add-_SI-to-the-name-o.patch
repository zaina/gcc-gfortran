From 00576f7abba8938794b7b5717389e72752771539 Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Tue, 17 Nov 2015 15:04:32 +0000
Subject: [PATCH 46/47] Improved support for STRUCTURE: add _SI to the name of
 the initializer.

Legacy code can define a variable with RECORD that has the same name as the
structure used, and this clashes with the name of the initializer. To work
around this, we add "_SI" (structure initializer) to the name of the
constructor function for that type. The exact reasons for this clash and the
expected behaviour are not clear at the moment.
---
 gcc/fortran/decl.c     | 61 +++++++++++++++++++++++++++++++++++++++++---------
 gcc/fortran/gfortran.h |  2 +-
 gcc/fortran/match.h    |  1 +
 gcc/fortran/parse.c    |  2 +-
 4 files changed, 54 insertions(+), 12 deletions(-)

diff --git a/gcc/fortran/decl.c b/gcc/fortran/decl.c
index 81035a5..d0c35a1 100644
--- a/gcc/fortran/decl.c
+++ b/gcc/fortran/decl.c
@@ -2656,7 +2656,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
   bool seen_deferred_kind, matched_type;
   char closed_type_string[3];
   char closing_character;
-  const char *dt_name;
+  const char *dt_name, *fn_name;
 
   /* A belt and braces check that the typespec is correctly being treated
      as a deferred characteristic association.  */
@@ -2899,14 +2899,30 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
   dt_name = gfc_get_string ("%c%s",
 			    (char) TOUPPER ((unsigned char) name[0]),
 			    (const char*)&name[1]);
+
+  fn_name = gfc_get_string ("%s", (const char*)name);
+
   sym = NULL;
   dt_sym = NULL;
   if (ts->kind != -1)
     {
-      gfc_get_ha_symbol (name, &sym);
-      if (sym->generic && gfc_find_symbol (dt_name, NULL, 0, &dt_sym))
+      /* Look for the derived type and the initializer function. If the type has
+	 the 'structure' tag, it came from a STRUCTURE keyword, and as such the
+	 initializer function is obfuscated. */
+
+      int find_dt_sym_err = gfc_find_symbol (dt_name, NULL, 0, &dt_sym);
+      if (dt_sym != NULL && dt_sym->attr.structure)
 	{
-	  gfc_error ("Type name '%s' at %C is ambiguous", name);
+	  fn_name = gfc_get_string ("%s_SI", (const char*) name);
+	  if (gfc_find_symbol(fn_name, NULL, 0, &sym) || sym == NULL) {
+	    gfc_error ("No initializer was defined for type '%s' at %C", name);
+	    return MATCH_ERROR;
+	  }
+	}
+      gfc_get_ha_symbol (fn_name, &sym);
+      if (sym->generic && find_dt_sym_err)
+	{
+	  gfc_error ("Type name '%s' at %C is ambiguous", fn_name);
 	  return MATCH_ERROR;
 	}
       if (sym->generic && !dt_sym)
@@ -2916,7 +2932,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
     {
       int iface = gfc_state_stack->previous->state != COMP_INTERFACE
 		    || gfc_current_ns->has_import_set;
-      gfc_find_symbol (name, NULL, iface, &sym);
+      gfc_find_symbol (fn_name, NULL, iface, &sym);
       if (sym && sym->generic && gfc_find_symbol (dt_name, NULL, 1, &dt_sym))
 	{
 	  gfc_error ("Type name '%s' at %C is ambiguous", name);
@@ -7662,7 +7678,7 @@ gfc_get_type_attr_spec (symbol_attribute *attr, char *name)
    already to be known as a derived type yet have no components.  */
 
 match
-gfc_match_derived_decl (void)
+gfc_match_derived_or_structure_decl (int initializer_flag)
 {
   char name[GFC_MAX_SYMBOL_LEN + 1];
   char parent[GFC_MAX_SYMBOL_LEN + 1];
@@ -7673,6 +7689,7 @@ gfc_match_derived_decl (void)
   match is_type_attr_spec = MATCH_NO;
   bool seen_attr = false;
   gfc_interface *intr = NULL, *head;
+  const char* fn_name;
 
   if (gfc_current_state () == COMP_DERIVED)
     return MATCH_NO;
@@ -7722,7 +7739,16 @@ gfc_match_derived_decl (void)
       return MATCH_ERROR;
     }
 
-  if (gfc_get_symbol (name, NULL, &gensym))
+  if (initializer_flag)
+    {
+      fn_name = name;
+    }
+  else
+    {
+      fn_name = gfc_get_string ("%s_SI", name);
+    }
+
+  if (gfc_get_symbol (fn_name, NULL, &gensym))
     return MATCH_ERROR;
 
   if (!gensym->attr.generic && gensym->ts.type != BT_UNKNOWN)
@@ -7753,9 +7779,9 @@ gfc_match_derived_decl (void)
     {
       /* Use upper case to save the actual derived-type symbol.  */
       gfc_get_symbol (gfc_get_string ("%c%s",
-			(char) TOUPPER ((unsigned char) gensym->name[0]),
-			&gensym->name[1]), NULL, &sym);
-      sym->name = gfc_get_string (gensym->name);
+			(char) TOUPPER ((unsigned char) name[0]),
+			 &name[1]), NULL, &sym);
+      sym->name = gfc_get_string (name);
       head = gensym->generic;
       intr = gfc_get_interface ();
       intr->sym = sym;
@@ -7784,6 +7810,10 @@ gfc_match_derived_decl (void)
 	      == FAILURE)
     return MATCH_ERROR;
 
+  /* If we specified an initializer, this is a derived type, otherwise it's a
+     legacy structure */
+  sym->attr.structure =  initializer_flag ? 0 : 1;
+
   if (sym->attr.access != ACCESS_UNKNOWN
       && gensym->attr.access == ACCESS_UNKNOWN)
     gensym->attr.access = sym->attr.access;
@@ -7840,6 +7870,17 @@ gfc_match_derived_decl (void)
   return MATCH_YES;
 }
 
+match
+gfc_match_derived_decl (void)
+{
+  return gfc_match_derived_or_structure_decl (1);
+}
+
+match
+gfc_match_structure_decl (void)
+{
+  return gfc_match_derived_or_structure_decl (0);
+}
 
 /* Cray Pointees can be declared as:
       pointer (ipt, a (n,m,...,*))  */
diff --git a/gcc/fortran/gfortran.h b/gcc/fortran/gfortran.h
index 939b3b4..29fdf57 100644
--- a/gcc/fortran/gfortran.h
+++ b/gcc/fortran/gfortran.h
@@ -804,7 +804,7 @@ typedef struct
      entities.  */
   unsigned alloc_comp:1, pointer_comp:1, proc_pointer_comp:1,
 	   private_comp:1, zero_comp:1, coarray_comp:1, lock_comp:1,
-	   defined_assign_comp:1, unlimited_polymorphic:1;
+	   defined_assign_comp:1, unlimited_polymorphic:1, structure:1;
 
   /* This is a temporary selector for SELECT TYPE or an associate
      variable for SELECT_TYPE or ASSOCIATE.  */
diff --git a/gcc/fortran/match.h b/gcc/fortran/match.h
index 16b1cc9..bf751d6 100644
--- a/gcc/fortran/match.h
+++ b/gcc/fortran/match.h
@@ -160,6 +160,7 @@ match gfc_match_function_decl (void);
 match gfc_match_entry (void);
 match gfc_match_subroutine (void);
 match gfc_match_derived_decl (void);
+match gfc_match_structure_decl (void);
 match gfc_match_final_decl (void);
 
 match gfc_match_implicit_none (void);
diff --git a/gcc/fortran/parse.c b/gcc/fortran/parse.c
index 1664b0b..a33934d 100644
--- a/gcc/fortran/parse.c
+++ b/gcc/fortran/parse.c
@@ -498,7 +498,7 @@ decode_statement (void)
       match ("sync all", gfc_match_sync_all, ST_SYNC_ALL);
       match ("sync images", gfc_match_sync_images, ST_SYNC_IMAGES);
       match ("sync memory", gfc_match_sync_memory, ST_SYNC_MEMORY);
-      match ("structure", gfc_match_derived_decl, ST_DERIVED_DECL);
+      match ("structure", gfc_match_structure_decl, ST_DERIVED_DECL);
       break;
 
     case 't':
-- 
1.9.1

