From 6f507f9971f8e06533d4da6cd9155e6db89b1f8f Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Thu, 17 Dec 2015 17:46:54 +0000
Subject: [PATCH 40/47] Refine the promotion of smaller ints during a function
 call.

Make gfc_arglist_matches_symbol check for exact matches before looking for
a match involving promotion.
---
 gcc/fortran/gfortran.h  |   4 +-
 gcc/fortran/interface.c | 100 ++++++++++++++++++++++++------------------------
 gcc/fortran/resolve.c   |   2 +-
 3 files changed, 55 insertions(+), 51 deletions(-)

diff --git a/gcc/fortran/gfortran.h b/gcc/fortran/gfortran.h
index 0eda100..939b3b4 100644
--- a/gcc/fortran/gfortran.h
+++ b/gcc/fortran/gfortran.h
@@ -602,6 +602,8 @@ typedef enum
 }
 gfc_reverse;
 
+enum match_type { MATCH_EXACT, MATCH_PROMOTABLE, MATCH_INVALID };
+
 /************************* Structures *****************************/
 
 /* Used for keeping things in balanced binary trees.  */
@@ -2902,7 +2904,7 @@ gfc_try gfc_add_interface (gfc_symbol *);
 gfc_interface *gfc_current_interface_head (void);
 void gfc_set_current_interface_head (gfc_interface *);
 gfc_symtree* gfc_find_sym_in_symtree (gfc_symbol*);
-bool gfc_arglist_matches_symbol (gfc_actual_arglist**, gfc_symbol*);
+bool gfc_arglist_matches_symbol (gfc_actual_arglist**, gfc_symbol*, enum match_type mtype);
 bool gfc_check_operator_interface (gfc_symbol*, gfc_intrinsic_op, locus);
 int gfc_has_vector_subscript (gfc_expr*);
 gfc_intrinsic_op gfc_equivalent_op (gfc_intrinsic_op);
diff --git a/gcc/fortran/interface.c b/gcc/fortran/interface.c
index 226d636..037b041 100644
--- a/gcc/fortran/interface.c
+++ b/gcc/fortran/interface.c
@@ -475,7 +475,7 @@ gfc_compare_derived_types (gfc_symbol *derived1, gfc_symbol *derived2)
 /* Compare two typespecs, recursively if necessary.  */
 
 int
-gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)
+gfc_compare_types_generic (gfc_typespec *ts1, gfc_typespec *ts2, enum match_type mtype)
 {
   /* See if one of the typespecs is a BT_VOID, which is what is being used
      to allow the funcs like c_f_pointer to accept any pointer type.
@@ -499,7 +499,13 @@ gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)
 	  || (ts2->type != BT_DERIVED && ts2->type != BT_CLASS)))
     return 0;
   if (ts1->type != BT_DERIVED && ts1->type != BT_CLASS)
-    return (ts1->kind == ts2->kind);
+    {
+    if (mtype == MATCH_PROMOTABLE)
+      return (ts1->kind >= ts2->kind);
+    else
+      return (ts1->kind == ts2->kind);
+    }
+
 
   /* Compare derived types.  */
   if (gfc_type_compatible (ts1, ts2))
@@ -509,20 +515,11 @@ gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)
 }
 
 int
-gfc_compare_types_promotable (gfc_typespec *ts1, gfc_typespec *ts2)
+gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)
 {
-  /* All this ultimately changes is the comparison of 'kind' in
-     gfc_compare_types. We could probably rearrange things to get rid of this
-     temporary variable. */
-
-  gfc_typespec temp = *ts2;
-  if (temp.kind <= ts1->kind)
-    temp.kind = ts1->kind;
-  return gfc_compare_types (ts1, &temp);
+  return gfc_compare_types_generic (ts1, ts2, MATCH_EXACT);
 }
 
-
-
 /* Given two symbols that are formal arguments, compare their ranks
    and types.  Returns nonzero if they have the same rank and type,
    zero otherwise.  */
@@ -1851,7 +1848,7 @@ argument_rank_mismatch (const char *name, locus *where,
 
 static int
 compare_parameter (gfc_symbol *formal, gfc_expr *actual,
-		   int ranks_must_agree, int is_elemental, locus *where)
+                   int ranks_must_agree, int is_elemental, locus *where, enum match_type mtype)
 {
   gfc_ref *ref;
   bool rank_check, is_pointer;
@@ -1922,7 +1919,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,
   if ((actual->expr_type != EXPR_NULL || actual->ts.type != BT_UNKNOWN)
       && actual->ts.type != BT_HOLLERITH
       && formal->ts.type != BT_ASSUMED
-      && !gfc_compare_types_promotable (&formal->ts, &actual->ts)
+      && !gfc_compare_types_generic (&formal->ts, &actual->ts, mtype)
       && !(formal->ts.type == BT_DERIVED && actual->ts.type == BT_CLASS
 	   && gfc_compare_derived_types (formal->ts.u.derived,
 					 CLASS_DATA (actual)->ts.u.derived)))
@@ -2410,7 +2407,8 @@ gfc_has_vector_subscript (gfc_expr *e)
 
 static int
 compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,
-	 	       int ranks_must_agree, int is_elemental, locus *where)
+		       int ranks_must_agree, int is_elemental, locus *where,
+		       enum match_type mtype)
 {
   gfc_actual_arglist **new_arg, *a, *actual, temp;
   gfc_formal_arglist *f;
@@ -2528,7 +2526,7 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,
 	}
 
       if (!compare_parameter (f->sym, a->expr, ranks_must_agree,
-			      is_elemental, where))
+			      is_elemental, where, mtype))
 	return 0;
 
       /* TS 29113, 6.3p2.  */
@@ -3232,7 +3230,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)
 
   dummy_args = gfc_sym_get_dummy_args (sym);
 
-  if (!compare_actual_formal (ap, dummy_args, 0, sym->attr.elemental, where))
+  if (!compare_actual_formal (ap, dummy_args, 0, sym->attr.elemental, where, MATCH_PROMOTABLE))
     return FAILURE;
 
   if (check_intents (dummy_args, *ap) == FAILURE)
@@ -3280,7 +3278,7 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)
     }
 
   if (!compare_actual_formal (ap, comp->ts.interface->formal, 0,
-			      comp->attr.elemental, where))
+			      comp->attr.elemental, where, MATCH_EXACT))
     return;
 
   check_intents (comp->ts.interface->formal, *ap);
@@ -3294,7 +3292,7 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)
    GENERIC resolution.  */
 
 bool
-gfc_arglist_matches_symbol (gfc_actual_arglist** args, gfc_symbol* sym)
+gfc_arglist_matches_symbol (gfc_actual_arglist** args, gfc_symbol* sym, enum match_type mtype)
 {
   gfc_formal_arglist *dummy_args;
   bool r;
@@ -3304,7 +3302,7 @@ gfc_arglist_matches_symbol (gfc_actual_arglist** args, gfc_symbol* sym)
   dummy_args = gfc_sym_get_dummy_args (sym);
 
   r = !sym->attr.elemental;
-  if (compare_actual_formal (args, dummy_args, r, !r, NULL))
+  if (compare_actual_formal (args, dummy_args, r, !r, NULL, mtype))
     {
       check_intents (dummy_args, *args);
       if (gfc_option.warn_aliasing)
@@ -3330,7 +3328,8 @@ gfc_search_interface (gfc_interface *intr, int sub_flag,
   locus null_expr_loc;
   gfc_actual_arglist *a;
   bool has_null_arg = false;
-
+  enum match_type mtypes[] = { MATCH_EXACT, MATCH_PROMOTABLE };
+  int i;
   for (a = *ap; a; a = a->next)
     if (a->expr && a->expr->expr_type == EXPR_NULL
 	&& a->expr->ts.type == BT_UNKNOWN)
@@ -3340,38 +3339,41 @@ gfc_search_interface (gfc_interface *intr, int sub_flag,
 	break;
       }
 
-  for (; intr; intr = intr->next)
+  for (i=0; i<2; i++)
     {
-      if (intr->sym->attr.flavor == FL_DERIVED)
-	continue;
-      if (sub_flag && intr->sym->attr.function)
-	continue;
-      if (!sub_flag && intr->sym->attr.subroutine)
+      for (; intr; intr = intr->next)
+	{
+	  if (intr->sym->attr.flavor == FL_DERIVED)
+	    continue;
+	  if (sub_flag && intr->sym->attr.function)
+	    continue;
+	  if (!sub_flag && intr->sym->attr.subroutine)
 	continue;
 
-      if (gfc_arglist_matches_symbol (ap, intr->sym))
-	{
-	  if (has_null_arg && null_sym)
+	  if (gfc_arglist_matches_symbol (ap, intr->sym, mtypes[i]))
 	    {
-	      gfc_error ("MOLD= required in NULL() argument at %L: Ambiguity "
-			 "between specific functions %s and %s",
-			 &null_expr_loc, null_sym->name, intr->sym->name);
-	      return NULL;
-	    }
-	  else if (has_null_arg)
-	    {
-	      null_sym = intr->sym;
-	      continue;
-	    }
+	      if (has_null_arg && null_sym)
+		{
+		  gfc_error ("MOLD= required in NULL() argument at %L: Ambiguity "
+			     "between specific functions %s and %s",
+			     &null_expr_loc, null_sym->name, intr->sym->name);
+		  return NULL;
+		}
+	      else if (has_null_arg)
+		{
+		  null_sym = intr->sym;
+		  continue;
+		}
 
-	  /* Satisfy 12.4.4.1 such that an elemental match has lower
-	     weight than a non-elemental match.  */
-	  if (intr->sym->attr.elemental)
-	    {
-	      elem_sym = intr->sym;
-	      continue;
+	      /* Satisfy 12.4.4.1 such that an elemental match has lower
+		 weight than a non-elemental match.  */
+	      if (intr->sym->attr.elemental)
+		{
+		  elem_sym = intr->sym;
+		  continue;
+		}
+	      return intr->sym;
 	    }
-	  return intr->sym;
 	}
     }
 
@@ -3506,7 +3508,7 @@ matching_typebound_op (gfc_expr** tb_base,
 
 		/* Check if this arglist matches the formal.  */
 		argcopy = gfc_copy_actual_arglist (args);
-		matches = gfc_arglist_matches_symbol (&argcopy, target);
+		matches = gfc_arglist_matches_symbol (&argcopy, target, MATCH_EXACT);
 		gfc_free_actual_arglist (argcopy);
 
 		/* Return if we found a match.  */
diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c
index 7f13565..200bbcd 100644
--- a/gcc/fortran/resolve.c
+++ b/gcc/fortran/resolve.c
@@ -6134,7 +6134,7 @@ resolve_typebound_generic_call (gfc_expr* e, const char **name)
 				  && gfc_sym_get_dummy_args (target) == NULL);
 
 	  /* Check if this arglist matches the formal.  */
-	  matches = gfc_arglist_matches_symbol (&args, target);
+	  matches = gfc_arglist_matches_symbol (&args, target, MATCH_EXACT);
 
 	  /* Clean up and break out of the loop if we've found it.  */
 	  gfc_free_actual_arglist (args);
-- 
1.9.1

