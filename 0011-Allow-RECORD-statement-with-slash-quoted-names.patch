From 72473a8db465750eaacaff8c8aadfb2e9ac12f98 Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Mon, 14 Sep 2015 18:02:32 +0100
Subject: [PATCH 11/47] Allow RECORD statement with slash-quoted names

---
 gcc/fortran/decl.c  | 25 ++++++++++++++++++++-----
 gcc/fortran/match.c |  4 ++--
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/gcc/fortran/decl.c b/gcc/fortran/decl.c
index 34e0f32..90dc5e9 100644
--- a/gcc/fortran/decl.c
+++ b/gcc/fortran/decl.c
@@ -2581,6 +2581,8 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
   match m;
   char c;
   bool seen_deferred_kind, matched_type;
+  char closed_type_string[3];
+  char closing_character;
   const char *dt_name;
 
   /* A belt and braces check that the typespec is correctly being treated
@@ -2614,14 +2616,27 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
     }
 
 
+  closing_character = ')';
   m = gfc_match (" type (");
+  if(m != MATCH_YES)
+    {
+      m = gfc_match (" record (");
+      if(m != MATCH_YES)
+	{
+	  m = gfc_match (" record /");
+	  if(m == MATCH_YES)
+	    closing_character = '/';
+	}
+    }
+
   matched_type = (m == MATCH_YES);
   if (matched_type)
     {
       gfc_gobble_whitespace ();
       if (gfc_peek_ascii_char () == '*')
 	{
-	  if ((m = gfc_match ("*)")) != MATCH_YES)
+	  snprintf(closed_type_string, 3, "*%c", closing_character);
+	  if ((m = gfc_match (closed_type_string)) != MATCH_YES)
 	    return m;
 	  if (gfc_current_state () == COMP_DERIVED)
 	    {
@@ -2661,7 +2676,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
       else
 	m = MATCH_YES;
 
-      if (matched_type && m == MATCH_YES && gfc_match_char (')') != MATCH_YES)
+      if (matched_type && m == MATCH_YES && gfc_match_char (closing_character) != MATCH_YES)
 	m = MATCH_ERROR;
 
       return m;
@@ -2685,7 +2700,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
 	  && gfc_notify_std (GFC_STD_F2008, "TYPE with "
 			  "intrinsic-type-spec at %C") == FAILURE)
 	return MATCH_ERROR;
-      if (matched_type && gfc_match_char (')') != MATCH_YES)
+      if (matched_type && gfc_match_char (closing_character) != MATCH_YES)
 	return MATCH_ERROR;
 
       ts->type = BT_REAL;
@@ -2716,7 +2731,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
 			  "intrinsic-type-spec at %C") == FAILURE)
 	return MATCH_ERROR;
 
-      if (matched_type && gfc_match_char (')') != MATCH_YES)
+      if (matched_type && gfc_match_char (closing_character) != MATCH_YES)
 	return MATCH_ERROR;
 
       ts->type = BT_COMPLEX;
@@ -2733,7 +2748,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)
     }
 
   if (matched_type)
-    m = gfc_match_char (')');
+    m = gfc_match_char (closing_character);
 
   if (m == MATCH_YES)
     ts->type = BT_DERIVED;
diff --git a/gcc/fortran/match.c b/gcc/fortran/match.c
index 9827b6c..33ad0fa 100644
--- a/gcc/fortran/match.c
+++ b/gcc/fortran/match.c
@@ -531,8 +531,8 @@ gfc_match_name (char *buffer)
   c = gfc_next_ascii_char ();
   if (!(ISALPHA (c) || (c == '_' && gfc_option.flag_allow_leading_underscore)))
     {
-      if (gfc_error_flag_test() == 0 && c != '(')
-	gfc_error ("Invalid character in name at %C");
+      if (gfc_error_flag_test() == 0 && c != '(' && c != '/')
+        gfc_error ("Invalid character in name ('%c') at %C",c);
       gfc_current_locus = old_loc;
       return MATCH_NO;
     }
-- 
1.9.1

