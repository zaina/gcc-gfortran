From 5e6db471b81d8331da05a3b54fde6e88bc02c760 Mon Sep 17 00:00:00 2001
From: Mark Doffman <mark.doffman@codethink.co.uk>
Date: Tue, 23 Jun 2015 22:59:08 +0000
Subject: [PATCH 04/47] Allow repeated compatible type specifications.

Add a check to see if a repeated type specification is compatible
with the previous specification. Only create an error on incompatible
type specifications for the same symbol.

Some fixes by Jim MacArthur <jim.macarthur@codethink.co.uk>
---
 gcc/fortran/decl.c                             |  4 ++--
 gcc/fortran/symbol.c                           | 23 +++++++++++++++++++----
 gcc/testsuite/gfortran.dg/duplicate_type_2.f90 |  4 ++--
 gcc/testsuite/gfortran.dg/func_decl_2.f90      |  2 ++
 4 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/gcc/fortran/decl.c b/gcc/fortran/decl.c
index d5a3e81..13bd122 100644
--- a/gcc/fortran/decl.c
+++ b/gcc/fortran/decl.c
@@ -7138,8 +7138,8 @@ gfc_match_automatic (void)
       switch (m)
 	{
 	case MATCH_YES:
-	  if (!gfc_add_automatic (&sym->attr, sym->name,
-			     &gfc_current_locus))
+	  if (gfc_add_automatic (&sym->attr, sym->name,
+			     &gfc_current_locus) == FAILURE)
 	    return MATCH_ERROR;
 	  if (gfc_match_eos () == MATCH_YES)
 	    return MATCH_YES;
diff --git a/gcc/fortran/symbol.c b/gcc/fortran/symbol.c
index 7751785..2d34e74 100644
--- a/gcc/fortran/symbol.c
+++ b/gcc/fortran/symbol.c
@@ -1708,6 +1708,8 @@ gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)
   if (sym->attr.result && type == BT_UNKNOWN && sym->ns->proc_name)
     type = sym->ns->proc_name->ts.type;
 
+  flavor = sym->attr.flavor;
+
   if (type != BT_UNKNOWN && !(sym->attr.function && sym->attr.implicit_type))
     {
       if (sym->attr.use_assoc)
@@ -1715,8 +1717,23 @@ gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)
 		   "use-associated at %L", sym->name, where, sym->module,
 		   &sym->declared_at);
       else
-	gfc_error ("Symbol '%s' at %L already has basic type of %s", sym->name,
-		 where, gfc_basic_typename (type));
+	{
+          if (sym->ts.type == BT_DERIVED) {
+	    /* Ignore temporaries */
+	    return FAILURE;
+	  }
+	  if (gfc_compare_types(&sym->ts, ts) && (flavor == FL_UNKNOWN || flavor == FL_VARIABLE))
+	    {
+	      return gfc_notify_std (GFC_STD_LEGACY,
+				     "Symbol '%s' at %L already has basic type of %s", sym->name,
+				     where, gfc_basic_typename (type));
+	    }
+	  else
+	    {
+	      gfc_error ("Symbol '%s' at %L already has basic type of %s", sym->name,
+			 where, gfc_basic_typename (type));
+	    }
+	}
       return FAILURE;
     }
 
@@ -1727,8 +1744,6 @@ gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)
       return FAILURE;
     }
 
-  flavor = sym->attr.flavor;
-
   if (flavor == FL_PROGRAM || flavor == FL_BLOCK_DATA || flavor == FL_MODULE
       || flavor == FL_LABEL
       || (flavor == FL_PROCEDURE && sym->attr.subroutine)
diff --git a/gcc/testsuite/gfortran.dg/duplicate_type_2.f90 b/gcc/testsuite/gfortran.dg/duplicate_type_2.f90
index 0fd9258..4fb8088 100644
--- a/gcc/testsuite/gfortran.dg/duplicate_type_2.f90
+++ b/gcc/testsuite/gfortran.dg/duplicate_type_2.f90
@@ -14,10 +14,10 @@ END FUNCTION foo
 
 INTEGER FUNCTION bar () RESULT (x)
   IMPLICIT NONE
-  INTEGER :: x ! { dg-error "basic type of" }
+  INTEGER :: x ! { dg-warning "basic type of" }
 
   INTEGER :: y
-  INTEGER :: y ! { dg-error "basic type of" }
+  INTEGER :: y ! { dg-warning "basic type of" }
 
   x = 42
 END FUNCTION bar
diff --git a/gcc/testsuite/gfortran.dg/func_decl_2.f90 b/gcc/testsuite/gfortran.dg/func_decl_2.f90
index 658883e..5459b1c 100644
--- a/gcc/testsuite/gfortran.dg/func_decl_2.f90
+++ b/gcc/testsuite/gfortran.dg/func_decl_2.f90
@@ -1,4 +1,6 @@
 ! { dg-do compile }
+! { dg-options "-std=f95" }
+
 ! Test fix for PR16943 in which the double typing of
 ! N caused an error.
 !
-- 
1.9.1

