From 2ea87c597350f5cdeaec6e00820dd3e7d2f30595 Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Wed, 11 Nov 2015 17:05:27 +0000
Subject: [PATCH 34/47] Allow continued include lines

---
 gcc/fortran/parse.c   |  2 +-
 gcc/fortran/scanner.c | 19 ++++++++++++++++---
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/gcc/fortran/parse.c b/gcc/fortran/parse.c
index 3a5e1ce..1664b0b 100644
--- a/gcc/fortran/parse.c
+++ b/gcc/fortran/parse.c
@@ -2955,7 +2955,7 @@ parse_if_block (void)
   if (gfc_option.flag_oracle_support && top->expr1->ts.type != BT_LOGICAL)
     {
       d->expr1 = gfc_ne (top->expr1, gfc_get_int_expr (1, &gfc_current_locus, 0), INTRINSIC_NE);
-      gfc_warning_now ("The type of condition in this IF statement isn't LOGICAL; it will be true if it evaluates to nonzero.", top->expr1->ts.type);
+      gfc_warning_now ("The type of condition in this IF statement isn't LOGICAL; it will be true if it evaluates to nonzero.");
     }
 
   top->expr1 = NULL;
diff --git a/gcc/fortran/scanner.c b/gcc/fortran/scanner.c
index f714ed0..adc28be 100644
--- a/gcc/fortran/scanner.c
+++ b/gcc/fortran/scanner.c
@@ -85,6 +85,7 @@ static struct gfc_file_change
 size_t file_changes_cur, file_changes_count;
 size_t file_changes_allocated;
 
+static bool include_line (gfc_char_t *line, int test_only);
 
 /* Functions dealing with our wide characters (gfc_char_t) and
    sequences of such characters.  */
@@ -1582,6 +1583,12 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)
       *buffer++ = c;
       i++;
 
+      if (maxlen > 0 && gfc_option.flag_oracle_support && include_line (*pbuf, 1))
+	{
+	  gfc_warning_now("An include line longer than 72 characters is nonstandard.");
+	  maxlen = 0;
+	}
+
       if (maxlen == 0 || preprocessor_flag)
 	{
 	  if (i >= buflen)
@@ -1595,6 +1602,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)
 	}
       else if (i >= maxlen)
 	{
+
 	  bool trunc_warn = true;
 
 	  /* Enhancement, if the very next non-space character is an ampersand
@@ -1833,6 +1841,7 @@ preprocessor_line (gfc_char_t *c)
 
 static gfc_try load_file (const char *, const char *, bool);
 
+
 /* include_line()-- Checks a line buffer to see if it is an include
    line.  If so, we call load_file() recursively to load the included
    file.  We never return a syntax error because a statement like
@@ -1840,7 +1849,7 @@ static gfc_try load_file (const char *, const char *, bool);
    processed or true if we matched an include.  */
 
 static bool
-include_line (gfc_char_t *line)
+include_line (gfc_char_t *line, int test_only)
 {
   gfc_char_t quote, *c, *begin, *stop;
   char *filename;
@@ -1870,6 +1879,11 @@ include_line (gfc_char_t *line)
   if (gfc_wide_strncasecmp (c, "include", 7))
     return false;
 
+  if (test_only)
+    {
+      return true;
+    }
+  
   c += 7;
   while (*c == ' ' || *c == '\t')
     c++;
@@ -1909,7 +1923,6 @@ include_line (gfc_char_t *line)
   return true;
 }
 
-
 /* Load a file into memory by calling load_line until the file ends.  */
 
 static gfc_try
@@ -2059,7 +2072,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)
 	 but the first line that's not a preprocessor line.  */
       first_line = false;
 
-      if (include_line (line))
+      if (include_line (line, 0))
 	{
 	  current_file->line++;
 	  continue;
-- 
1.9.1

