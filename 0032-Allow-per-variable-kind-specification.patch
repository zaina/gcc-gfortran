From 59bb67ea383206d8e1e30fca2ca4e23a7c714078 Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Thu, 5 Nov 2015 18:57:53 +0000
Subject: [PATCH 32/47] Allow per-variable kind specification.

      INTEGER*4 x*2, y*8

The per-variable sizes override the kind specified in the type.
At the moment, you can follow this with an array specification, so
INTEGER x*2(10) is OK, but not the other way round.
---
 gcc/fortran/decl.c | 45 +++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 41 insertions(+), 4 deletions(-)

diff --git a/gcc/fortran/decl.c b/gcc/fortran/decl.c
index 8a29c6d..81035a5 100644
--- a/gcc/fortran/decl.c
+++ b/gcc/fortran/decl.c
@@ -781,6 +781,24 @@ syntax:
   return MATCH_ERROR;
 }
 
+/* This matches the nonstandard kind given after a variable name, like:
+   INTEGER x*2, y*4
+   The per-variable kind will override any kind given in the type
+   declaration.
+*/
+
+static match
+match_per_symbol_kind (int *length)
+{
+  match m;
+
+  m = gfc_match_char ('*');
+  if (m != MATCH_YES)
+    return m;
+
+  m = gfc_match_small_literal_int (length, NULL);
+  return m;
+}
 
 /* Special subroutine for finding a symbol.  Check if the name is found
    in the current name space.  If not, and we're compiling a function or
@@ -1837,10 +1855,13 @@ variable_decl (int elem)
   gfc_try t;
   gfc_symbol *sym;
   match cl_match;
+  match kind_match;
+  int overridden_kind;
 
   initializer = NULL;
   as = NULL;
   cp_as = NULL;
+  kind_match = MATCH_NO;
 
   /* When we get here, we've just matched a list of attributes and
      maybe a type and a double colon.  The next thing we expect to see
@@ -1857,11 +1878,20 @@ variable_decl (int elem)
   cl_match = MATCH_NO;
 
   /* Check for a character length clause before an array clause */
-  if (gfc_option.flag_oracle_support && current_ts.type == BT_CHARACTER)
+  if (gfc_option.flag_oracle_support)
     {
-      cl_match = match_character_length_clause( &cl, &cl_deferred, elem );
-      if (cl_match == MATCH_ERROR)
-	goto cleanup;
+      if (current_ts.type == BT_CHARACTER)
+	{
+	  cl_match = match_character_length_clause( &cl, &cl_deferred, elem );
+	  if (cl_match == MATCH_ERROR)
+	    goto cleanup;
+	}
+      else
+	{
+	  kind_match = match_per_symbol_kind ( &overridden_kind );
+	  if (kind_match == MATCH_ERROR)
+	    goto cleanup;
+	}
     }
 
   /* Now we could see the optional array spec. or character length.  */
@@ -1991,6 +2021,13 @@ variable_decl (int elem)
       goto cleanup;
     }
 
+  if ( kind_match == MATCH_YES )
+    {
+      gfc_find_symbol (name, gfc_current_ns, 1, &sym);
+      /* sym *must* be found at this point */
+      sym->ts.kind = overridden_kind;
+    }
+
   if (check_function_name (name) == FAILURE)
     {
       m = MATCH_ERROR;
-- 
1.9.1

